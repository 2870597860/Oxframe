/**********************************************************************************
 Copyright (C) 2009
 by 52 North Initiative for Geospatial Open Source Software GmbH

 Contact: Andreas Wytzisk 
 52 North Initiative for Geospatial Open Source Software GmbH
 Martin-Luther-King-Weg 24
 48155 Muenster, Germany
 info@52north.org

 This program is free software; you can redistribute and/or modify it under the
 terms of the GNU General Public License version 2 as published by the Free
 Software Foundation.

 This program is distributed WITHOUT ANY WARRANTY; even without the implied
 WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License along with this 
 program (see gnu-gplv2.txt). If not, write to the Free Software Foundation, Inc., 
 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA or visit the Free Software
 Foundation web page, http://www.fsf.org.
 
 Created on: 06.01.2006
 *********************************************************************************/

package org.n52.oxf.serviceAdapters.sas;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import net.opengeospatial.ows.DCPDocument;
import net.opengeospatial.ows.OperationDocument;
import net.opengeospatial.ows.RequestMethodType;
import net.opengeospatial.ows.ValueType;
import net.opengeospatial.ows.OperationsMetadataDocument.OperationsMetadata;
import net.opengis.sas.x00.CapabilitiesDocument;
import net.opengis.sas.x00.SubscriptionOfferingType;

import org.n52.oxf.OXFException;
import org.n52.oxf.owsCommon.ServiceDescriptor;
import org.n52.oxf.owsCommon.capabilities.Contents;
import org.n52.oxf.owsCommon.capabilities.DCP;
import org.n52.oxf.owsCommon.capabilities.GetRequestMethod;
import org.n52.oxf.owsCommon.capabilities.OnlineResource;
import org.n52.oxf.owsCommon.capabilities.Operation;
import org.n52.oxf.owsCommon.capabilities.Parameter;
import org.n52.oxf.owsCommon.capabilities.PostRequestMethod;
import org.n52.oxf.owsCommon.capabilities.RequestMethod;
import org.n52.oxf.owsCommon.capabilities.ServiceIdentification;
import org.n52.oxf.owsCommon.capabilities.ServiceProvider;
import org.n52.oxf.serviceAdapters.sas.caps.SASOffering;
import org.n52.oxf.valueDomains.StringValueDomain;

/**
 * maps the Capabilities of the SAS into a ServiceDescriptor object.
 * 
 * NOT YET COMPLETED!
 * 
 * @author <a href="mailto:broering@52north.org">Arne Broering</a>
 * 
 */
public class SASCapabilitiesMapper {

    /**
     * 
     * @param capsDoc
     * @return
     * @throws OXFException
     */
    public static ServiceDescriptor mapCapabilities(net.opengis.sas.x00.CapabilitiesDocument capsDoc) throws OXFException {

        String version = mapVersion(capsDoc);
        ServiceIdentification serviceIdentification = null; // mapServiceIdentification(capsDoc.getCapabilities().getServiceIdentification());
        ServiceProvider serviceProvider = null; // mapServiceProvider(capsDoc);
        org.n52.oxf.owsCommon.capabilities.OperationsMetadata operationsMetadata = null; //mapOperationsMetadata(capsDoc.getCapabilities().getOperationsMetadata());
        Contents contents = mapContents(capsDoc.getCapabilities().getContents());

        ServiceDescriptor serviceDesc = new ServiceDescriptor(version,
                                                              serviceIdentification,
                                                              serviceProvider,
                                                              operationsMetadata,
                                                              contents);
        return serviceDesc;
    }

    /**
     * this method goes through the supported operations declared in the OperationsMetadata-section of the
     * SAS-Capabilities and maps the provided informations to the OXF internal capabilities-model (e.g. the
     * class org.n52.oxf.owsCommon.capabilities.OperationsMetadata)
     * 
     * @param metadata
     * 
     * @param xb_opMetadata
     * @return
     */
    private static org.n52.oxf.owsCommon.capabilities.OperationsMetadata mapOperationsMetadata(OperationsMetadata xb_opMetadata) {

        //
        // map the operations:
        //

        OperationDocument.Operation[] xb_operations = xb_opMetadata.getOperationArray();
        
        Operation[] oc_operations = new Operation[xb_operations.length];
        
        for (int i = 0; i < xb_operations.length; i++) {
            OperationDocument.Operation xb_operation = xb_operations[i];

            String oc_operationName = xb_operation.getName();

            //
            // map the operations DCPs:
            //

            DCPDocument.DCP[] xb_dcps = xb_operation.getDCPArray();
            DCP[] oc_dcps = new DCP[xb_dcps.length];
            for (int j = 0; j < xb_dcps.length; j++) {
                DCPDocument.DCP xb_dcp = xb_dcps[j];

                //
                // map the RequestMethods:
                //

                List<RequestMethod> oc_requestMethods = new ArrayList<RequestMethod>();

                RequestMethodType[] xb_getRequestMethods = xb_dcp.getHTTP().getGetArray();
                for (int k = 0; k < xb_getRequestMethods.length; k++) {
                    RequestMethodType xb_getRequestMethod = xb_getRequestMethods[k];
                    OnlineResource oc_onlineRessource = new OnlineResource(xb_getRequestMethod.getHref());
                    RequestMethod oc_requestMethod = new GetRequestMethod(oc_onlineRessource);
                    oc_requestMethods.add(oc_requestMethod);
                }

                RequestMethodType[] xb_postRequestMethods = xb_dcp.getHTTP().getPostArray();
                for (int k = 0; k < xb_postRequestMethods.length; k++) {
                    RequestMethodType xb_postRequestMethod = xb_postRequestMethods[k];
                    OnlineResource oc_onlineRessource = new OnlineResource(xb_postRequestMethod.getHref());
                    RequestMethod oc_requestMethod = new PostRequestMethod(oc_onlineRessource);
                    oc_requestMethods.add(oc_requestMethod);
                }

                oc_dcps[j] = new DCP(oc_requestMethods);
            }

            //
            // map the operations parameters:
            //

            net.opengeospatial.ows.OperationDocument.Operation.Parameter[] xb_parameters = xb_operation.getParameterArray();

            List<Parameter> oc_parameters = new ArrayList<Parameter>();

            for (int j = 0; j < xb_parameters.length; j++) {

                net.opengeospatial.ows.OperationDocument.Operation.Parameter xb_parameter = xb_parameters[j];

                String parameterName = xb_parameter.getName();

                if (parameterName.equalsIgnoreCase("eventTime")) {
                    // do nothing! because the eventTime Parameter will be added
                    // from Contents section
                }
                else {
                    boolean oc_required;
                    if (xb_parameter.getUse() != null && xb_parameter.getUse().equals("required")) {
                        oc_required = true;
                    }
                    else {
                        oc_required = false;
                    }

                    //
                    // map the parameters' values to StringValueDomains
                    //

                    ValueType[] xb_values = xb_parameter.getValueArray();
                    StringValueDomain oc_values = new StringValueDomain();
                    for (int k = 0; k < xb_values.length; k++) {
                        ValueType xb_value = xb_values[k];

                        oc_values.addPossibleValue(xb_value.getStringValue());
                    }

                    Parameter oc_parameter = new Parameter(parameterName, oc_required, oc_values, null);
                    oc_parameters.add(oc_parameter);
                }
            }

            Parameter[] parametersArray = new Parameter[oc_parameters.size()];
            oc_parameters.toArray(parametersArray);

            oc_operations[i] = new Operation(oc_operationName, parametersArray, null, oc_dcps);
        }

        return new org.n52.oxf.owsCommon.capabilities.OperationsMetadata(oc_operations);
    }

    /**
     * so far, only a few elements are parsed:
     */
    private static Contents mapContents(net.opengis.sas.x00.ContentsDocument.Contents xb_contents) throws OXFException {
        
        Contents contents = new Contents();

        //
        // mapping of SubscriptionOfferings:
        //
        if (xb_contents == null) {
            throw new NullPointerException();
        }
        if (xb_contents.getSubscriptionOfferingList() == null) {
            return new Contents();
        }
        SubscriptionOfferingType[] xb_subscriptionArray = xb_contents.getSubscriptionOfferingList().getSubscriptionOfferingArray();

        for (int i = 0; i < xb_subscriptionArray.length; i++) {

            SubscriptionOfferingType xb_subOff = xb_subscriptionArray[i];

            String subscriptionOfferingID = xb_subOff.getSubscriptionOfferingID();
            
            
            SASOffering subscriptionOffering = new SASOffering("title not defined", 
                                                               subscriptionOfferingID,
                                                               null,
                                                               null,
                                                               null,
                                                               null,
                                                               null,
                                                               null,
                                                               null,
                                                               null,
                                                               null);
            
            contents.addDataIdentication(subscriptionOffering);
        }

        return contents;
    }

    /**
     * 
     * @param capsDoc
     * @return
     */
    private static String mapVersion(CapabilitiesDocument capsDoc) {
        return capsDoc.getCapabilities().getVersion();
    }

    /**
     * 
     * @param capsDoc
     * @return
     */
    private static ServiceIdentification mapServiceIdentification(net.opengeospatial.ows.ServiceIdentificationDocument.ServiceIdentification xb_serviceId) {

        String oc_title = xb_serviceId.getTitle();
        String oc_serviceType = xb_serviceId.getServiceType().getStringValue();
        String[] oc_serviceTypeVersions = xb_serviceId.getServiceTypeVersionArray();

        String oc_fees = xb_serviceId.getFees();
        String[] oc_accessConstraints = xb_serviceId.getAccessConstraintsArray();
        String oc_abstract = xb_serviceId.getAbstract();
        String[] oc_keywords = null;

        Vector<String> oc_keywordsVec = new Vector<String>();
        for (int i = 0; i < xb_serviceId.getKeywordsArray().length; i++) {
            String[] xb_keywords = xb_serviceId.getKeywordsArray(i).getKeywordArray();
            for (String keyword : xb_keywords) {
                oc_keywordsVec.add(keyword);
            }
        }
        oc_keywords = new String[oc_keywordsVec.size()];
        oc_keywordsVec.toArray(oc_keywords);

        return new ServiceIdentification(oc_title,
                                         oc_serviceType,
                                         oc_serviceTypeVersions,
                                         oc_fees,
                                         oc_accessConstraints,
                                         oc_abstract,
                                         oc_keywords);
    }

    /**
     * 
     * @param capsDoc
     * @return
     */
    private static ServiceProvider mapServiceProvider(CapabilitiesDocument capsDoc) {
        // TODO has to be implemented
        return null;
    }
}